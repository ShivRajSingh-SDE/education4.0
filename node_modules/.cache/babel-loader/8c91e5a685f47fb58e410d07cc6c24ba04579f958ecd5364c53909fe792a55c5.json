{"ast":null,"code":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { isClient } from '../helpers/is-client';\nimport { useWatchLocalStorageValue } from '../hooks/use-watch-localstorage-value';\nimport { getThemeMode } from '../theme-store';\nconst DEFAULT_MODE = 'light';\nconst LS_THEME_MODE = 'flowbite-theme-mode';\nconst SYNC_THEME_MODE = 'flowbite-theme-mode-sync';\nexport const useThemeMode = () => {\n  const [mode, setMode] = useState(getInitialMode(getThemeMode()));\n  /**\n   * Persist `mode` in local storage and add/remove `dark` class on `html`\n   */\n  useEffect(() => {\n    setModeInLS(mode);\n    setModeInDOM(mode);\n  }, []); // eslint-disable-line\n  /**\n   * Sync all tabs with the latest theme mode value\n   */\n  useWatchLocalStorageValue({\n    key: LS_THEME_MODE,\n    onChange(newValue) {\n      if (newValue) return handleSetMode(newValue);\n    }\n  });\n  /**\n   * Keep the other instances of the hook in sync (bi-directional)\n   */\n  useSyncMode(mode => setMode(mode));\n  /**\n   * Sets `mode` to a given value: `light | dark` | `auto`\n   */\n  const handleSetMode = mode => {\n    setMode(mode);\n    setModeInLS(mode);\n    setModeInDOM(mode);\n    document.dispatchEvent(new CustomEvent(SYNC_THEME_MODE, {\n      detail: mode\n    }));\n  };\n  /**\n   * Toggles between: `light | dark`\n   */\n  const toggleMode = () => {\n    let newMode = mode;\n    if (newMode === 'auto') newMode = computeModeValue(newMode);\n    newMode = newMode === 'dark' ? 'light' : 'dark';\n    handleSetMode(newMode);\n  };\n  /**\n   * Sets the value to `<Flowbite theme={{ mode }}>` prop\n   */\n  const clearMode = () => {\n    const newMode = getThemeMode() ?? DEFAULT_MODE;\n    handleSetMode(newMode);\n  };\n  return {\n    mode,\n    computedMode: computeModeValue(mode),\n    setMode: handleSetMode,\n    toggleMode,\n    clearMode\n  };\n};\n/**\n * Custom event listener on `SYNC_THEME_MODE`\n */\nconst useSyncMode = onChange => {\n  useEffect(() => {\n    function handleSync(e) {\n      const mode = e.detail;\n      onChange(mode);\n    }\n    document.addEventListener(SYNC_THEME_MODE, handleSync);\n    return () => document.removeEventListener(SYNC_THEME_MODE, handleSync);\n  }, []); // eslint-disable-line\n};\n/**\n * Sets the give value in local storage\n */\nconst setModeInLS = mode => localStorage.setItem(LS_THEME_MODE, mode);\n/**\n * Add or remove class `dark` on `html` element\n */\nconst setModeInDOM = mode => {\n  const computedMode = computeModeValue(mode);\n  if (computedMode === 'dark') {\n    document.documentElement.classList.add('dark');\n  } else {\n    document.documentElement.classList.remove('dark');\n  }\n};\nconst getInitialMode = defaultMode => {\n  if (!isClient()) return DEFAULT_MODE;\n  const LSMode = localStorage.getItem(LS_THEME_MODE);\n  return LSMode ?? defaultMode ?? DEFAULT_MODE;\n};\n/**\n * Parse `auto` mode value to either `light` or `dark`\n * @returns `light` | `dark`\n */\nconst computeModeValue = mode => {\n  return mode === 'auto' ? prefersColorScheme() : mode;\n};\n/**\n * Get browser prefered color scheme\n * @returns `light` | `dark`\n */\nconst prefersColorScheme = () => {\n  return window.matchMedia?.('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n};","map":{"version":3,"names":["useEffect","useState","isClient","useWatchLocalStorageValue","getThemeMode","DEFAULT_MODE","LS_THEME_MODE","SYNC_THEME_MODE","useThemeMode","mode","setMode","getInitialMode","setModeInLS","setModeInDOM","key","onChange","newValue","handleSetMode","useSyncMode","document","dispatchEvent","CustomEvent","detail","toggleMode","newMode","computeModeValue","clearMode","computedMode","handleSync","e","addEventListener","removeEventListener","localStorage","setItem","documentElement","classList","add","remove","defaultMode","LSMode","getItem","prefersColorScheme","window","matchMedia","matches"],"sources":["C:/Users/shivr/Downloads/2/Shiv/node_modules/flowbite-react/lib/esm/hooks/use-theme-mode.js"],"sourcesContent":["'use client';\nimport { useEffect, useState } from 'react';\nimport { isClient } from '../helpers/is-client';\nimport { useWatchLocalStorageValue } from '../hooks/use-watch-localstorage-value';\nimport { getThemeMode } from '../theme-store';\nconst DEFAULT_MODE = 'light';\nconst LS_THEME_MODE = 'flowbite-theme-mode';\nconst SYNC_THEME_MODE = 'flowbite-theme-mode-sync';\nexport const useThemeMode = () => {\n    const [mode, setMode] = useState(getInitialMode(getThemeMode()));\n    /**\n     * Persist `mode` in local storage and add/remove `dark` class on `html`\n     */\n    useEffect(() => {\n        setModeInLS(mode);\n        setModeInDOM(mode);\n    }, []); // eslint-disable-line\n    /**\n     * Sync all tabs with the latest theme mode value\n     */\n    useWatchLocalStorageValue({\n        key: LS_THEME_MODE,\n        onChange(newValue) {\n            if (newValue)\n                return handleSetMode(newValue);\n        },\n    });\n    /**\n     * Keep the other instances of the hook in sync (bi-directional)\n     */\n    useSyncMode((mode) => setMode(mode));\n    /**\n     * Sets `mode` to a given value: `light | dark` | `auto`\n     */\n    const handleSetMode = (mode) => {\n        setMode(mode);\n        setModeInLS(mode);\n        setModeInDOM(mode);\n        document.dispatchEvent(new CustomEvent(SYNC_THEME_MODE, { detail: mode }));\n    };\n    /**\n     * Toggles between: `light | dark`\n     */\n    const toggleMode = () => {\n        let newMode = mode;\n        if (newMode === 'auto')\n            newMode = computeModeValue(newMode);\n        newMode = newMode === 'dark' ? 'light' : 'dark';\n        handleSetMode(newMode);\n    };\n    /**\n     * Sets the value to `<Flowbite theme={{ mode }}>` prop\n     */\n    const clearMode = () => {\n        const newMode = getThemeMode() ?? DEFAULT_MODE;\n        handleSetMode(newMode);\n    };\n    return { mode, computedMode: computeModeValue(mode), setMode: handleSetMode, toggleMode, clearMode };\n};\n/**\n * Custom event listener on `SYNC_THEME_MODE`\n */\nconst useSyncMode = (onChange) => {\n    useEffect(() => {\n        function handleSync(e) {\n            const mode = e.detail;\n            onChange(mode);\n        }\n        document.addEventListener(SYNC_THEME_MODE, handleSync);\n        return () => document.removeEventListener(SYNC_THEME_MODE, handleSync);\n    }, []); // eslint-disable-line\n};\n/**\n * Sets the give value in local storage\n */\nconst setModeInLS = (mode) => localStorage.setItem(LS_THEME_MODE, mode);\n/**\n * Add or remove class `dark` on `html` element\n */\nconst setModeInDOM = (mode) => {\n    const computedMode = computeModeValue(mode);\n    if (computedMode === 'dark') {\n        document.documentElement.classList.add('dark');\n    }\n    else {\n        document.documentElement.classList.remove('dark');\n    }\n};\nconst getInitialMode = (defaultMode) => {\n    if (!isClient())\n        return DEFAULT_MODE;\n    const LSMode = localStorage.getItem(LS_THEME_MODE);\n    return LSMode ?? defaultMode ?? DEFAULT_MODE;\n};\n/**\n * Parse `auto` mode value to either `light` or `dark`\n * @returns `light` | `dark`\n */\nconst computeModeValue = (mode) => {\n    return mode === 'auto' ? prefersColorScheme() : mode;\n};\n/**\n * Get browser prefered color scheme\n * @returns `light` | `dark`\n */\nconst prefersColorScheme = () => {\n    return window.matchMedia?.('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}