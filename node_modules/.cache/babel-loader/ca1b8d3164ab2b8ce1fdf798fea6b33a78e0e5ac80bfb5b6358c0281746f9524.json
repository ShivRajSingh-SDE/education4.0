{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shivr\\\\Downloads\\\\2\\\\Shiv\\\\src\\\\Main.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport App from \"./App\";\nimport { AiFillRobot, AiOutlineSlack } from \"react-icons/ai\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  // const chatboxRef = useRef(null);\n  // const [userMessage, setUserMessage] = useState(\"\");\n  // const [chatMessages, setChatMessages] = useState([]);\n  // const [rotationAngle, setRotationAngle] = useState(0);\n  // const [chatbotVisible, setChatbotVisible] = useState(false);\n\n  // const API_KEY = \"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\";\n\n  // const createChatLi = (message, className) => {\n  //   const chatLi = (\n  //     <li className={`chat ${className}`} key={chatMessages.length}>\n  //       {className === \"outgoing\" ? (\n  //         <div className=\"\">\n  //           <p>{message}</p>\n  //         </div>\n  //       ) : (\n  //         <div className=\"needmsg\">\n  //           <span className=\"\">\n  //             <AiFillRobot id=\"bot\" />\n  //           </span>\n  //           <p>{message}</p>\n  //         </div>\n  //       )}\n  //     </li>\n  //   );\n  //   return chatLi;\n  // };\n\n  // const handleChat = () => {\n  //   if (userMessage.trim() === \"\") return;\n\n  //   const newMessages = [...chatMessages, userMessage];\n  //   setChatMessages(newMessages);\n  //   setUserMessage(\"\");\n\n  //   if (!newMessages.includes(\"Thinking...\")) {\n  //     setChatMessages([...newMessages, \"Thinking...\"]);\n  //     chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n\n  //     setTimeout(() => generateResponse(userMessage), 600);\n  //   }\n  // };\n\n  // const generateResponse = async (userMessage) => {\n  //   const API_URL = \"https://api.openai.com/v1/chat/completions\";\n\n  //   try {\n  //     const requestOptions = {\n  //       method: \"POST\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //         Authorization: `Bearer ${API_KEY}`,\n  //       },\n  //       body: JSON.stringify({\n  //         model: \"gpt-3.5-turbo\",\n  //         messages: [{ role: \"user\", content: userMessage }],\n  //       }),\n  //     };\n\n  //     const response = await fetch(API_URL, requestOptions);\n  //     const data = await response.json();\n\n  //     const responseMessage = data.choices[0].message.content.trim();\n  //     if (responseMessage !== \"\") {\n  //       setChatMessages((prevMessages) => [\n  //         ...prevMessages.slice(0, prevMessages.length - 1),\n  //         responseMessage,\n  //       ]);\n  //     }\n  //   } catch (error) {\n  //     console.error(\"Error generating response:\", error);\n  //   }\n  // };\n\n  // const handleChange = (event) => {\n  //   setUserMessage(event.target.value);\n  // };\n\n  // const handleSendMessage = () => {\n  //   handleChat();\n  // };\n\n  // const handleIconClick = () => {\n  //   setChatbotVisible(!chatbotVisible);\n  // };\n\n  // useEffect(() => {\n  //   chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n  // }, [chatMessages]);\n\n  // const chatbotClass = chatbotVisible ? \"chatbot-visible\" : \"chatbot-hidden\";\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useRef","useEffect","App","AiFillRobot","AiOutlineSlack","jsxDEV","_jsxDEV","Main","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shivr/Downloads/2/Shiv/src/Main.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport App from \"./App\";\r\nimport { AiFillRobot, AiOutlineSlack } from \"react-icons/ai\";\r\n\r\nconst Main = () => {\r\n  // const chatboxRef = useRef(null);\r\n  // const [userMessage, setUserMessage] = useState(\"\");\r\n  // const [chatMessages, setChatMessages] = useState([]);\r\n  // const [rotationAngle, setRotationAngle] = useState(0);\r\n  // const [chatbotVisible, setChatbotVisible] = useState(false);\r\n\r\n  // const API_KEY = \"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\";\r\n\r\n  // const createChatLi = (message, className) => {\r\n  //   const chatLi = (\r\n  //     <li className={`chat ${className}`} key={chatMessages.length}>\r\n  //       {className === \"outgoing\" ? (\r\n  //         <div className=\"\">\r\n  //           <p>{message}</p>\r\n  //         </div>\r\n  //       ) : (\r\n  //         <div className=\"needmsg\">\r\n  //           <span className=\"\">\r\n  //             <AiFillRobot id=\"bot\" />\r\n  //           </span>\r\n  //           <p>{message}</p>\r\n  //         </div>\r\n  //       )}\r\n  //     </li>\r\n  //   );\r\n  //   return chatLi;\r\n  // };\r\n\r\n  // const handleChat = () => {\r\n  //   if (userMessage.trim() === \"\") return;\r\n\r\n  //   const newMessages = [...chatMessages, userMessage];\r\n  //   setChatMessages(newMessages);\r\n  //   setUserMessage(\"\");\r\n\r\n  //   if (!newMessages.includes(\"Thinking...\")) {\r\n  //     setChatMessages([...newMessages, \"Thinking...\"]);\r\n  //     chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n\r\n  //     setTimeout(() => generateResponse(userMessage), 600);\r\n  //   }\r\n  // };\r\n\r\n  // const generateResponse = async (userMessage) => {\r\n  //   const API_URL = \"https://api.openai.com/v1/chat/completions\";\r\n\r\n  //   try {\r\n  //     const requestOptions = {\r\n  //       method: \"POST\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\",\r\n  //         Authorization: `Bearer ${API_KEY}`,\r\n  //       },\r\n  //       body: JSON.stringify({\r\n  //         model: \"gpt-3.5-turbo\",\r\n  //         messages: [{ role: \"user\", content: userMessage }],\r\n  //       }),\r\n  //     };\r\n\r\n  //     const response = await fetch(API_URL, requestOptions);\r\n  //     const data = await response.json();\r\n\r\n  //     const responseMessage = data.choices[0].message.content.trim();\r\n  //     if (responseMessage !== \"\") {\r\n  //       setChatMessages((prevMessages) => [\r\n  //         ...prevMessages.slice(0, prevMessages.length - 1),\r\n  //         responseMessage,\r\n  //       ]);\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.error(\"Error generating response:\", error);\r\n  //   }\r\n  // };\r\n\r\n  // const handleChange = (event) => {\r\n  //   setUserMessage(event.target.value);\r\n  // };\r\n\r\n  // const handleSendMessage = () => {\r\n  //   handleChat();\r\n  // };\r\n\r\n  // const handleIconClick = () => {\r\n  //   setChatbotVisible(!chatbotVisible);\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n  // }, [chatMessages]);\r\n\r\n  // const chatbotClass = chatbotVisible ? \"chatbot-visible\" : \"chatbot-hidden\";\r\n\r\n  return (\r\n    <div>\r\n      <App />\r\n      {/* <div id=\"chatbotdiv\">\r\n        <div className=\"main\">\r\n          <header className=\"header\">\r\n            <h2 className=\"\">AI Support</h2>\r\n          </header>\r\n\r\n          <div\r\n            className=\"chatbox\"\r\n            style={{ maxHeight: \"43vh\", overflowY: \"auto\" }}\r\n            ref={chatboxRef}\r\n          >\r\n            <ul>\r\n              {chatMessages.map((message, index) => {\r\n                if (message === \"Thinking...\") {\r\n                  return createChatLi(message, \"thinking\");\r\n                }\r\n                return createChatLi(\r\n                  message,\r\n                  index % 2 === 0 ? \"outgoing\" : \"incoming\"\r\n                );\r\n              })}\r\n            </ul>\r\n          </div>\r\n\r\n          <div className=\"flex\">\r\n            <textarea\r\n              className=\"textarea\"\r\n              placeholder=\"Enter a message...\"\r\n              spellCheck=\"false\"\r\n              required\r\n              value={userMessage}\r\n              onChange={handleChange}\r\n              onKeyPress={(e) => {\r\n                if (e.key === \"Enter\" && !e.shiftKey) {\r\n                  e.preventDefault();\r\n                  handleSendMessage();\r\n                }\r\n              }}\r\n            ></textarea>\r\n            <span\r\n              id=\"send-btn\"\r\n              className=\"material-symbols-rounded\"\r\n              onClick={handleSendMessage}\r\n            >\r\n              <AiOutlineSlack\r\n                onClick={handleSendMessage}\r\n                className={`text-[30px] transform rotate-${rotationAngle}`}\r\n              />\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,GAAG,MAAM,OAAO;AACvB,SAASC,WAAW,EAAEC,cAAc,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,IAAI,GAAGA,CAAA,KAAM;EACjB;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA,oBACED,OAAA;IAAAE,QAAA,eACEF,OAAA,CAACJ,GAAG;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAqDJ,CAAC;AAEV,CAAC;AAACC,EAAA,GAtJIN,IAAI;AAwJV,eAAeA,IAAI;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}