{"ast":null,"code":"import { cloneDeep } from './clone-deep';\nimport { isObject } from './is-object';\n/**\n * Merge and deep copy the values of all of the enumerable own properties of target object from source object to a new object\n * @param target The target object to get properties from.\n * @param source The source object from which to copy properties.\n * @return A new merged and deep copied object.\n */\nexport function mergeDeep(target, source) {\n  if (isObject(source) && Object.keys(source).length === 0) {\n    return cloneDeep({\n      ...target,\n      ...source\n    });\n  }\n  const output = {\n    ...target,\n    ...source\n  };\n  if (isObject(source) && isObject(target)) {\n    for (const key in source) {\n      if (isObject(source[key]) && key in target && isObject(target[key])) {\n        output[key] = mergeDeep(target[key], source[key]);\n      } else {\n        output[key] = isObject(source[key]) ? cloneDeep(source[key]) : source[key];\n      }\n    }\n  }\n  return output;\n}","map":{"version":3,"names":["cloneDeep","isObject","mergeDeep","target","source","Object","keys","length","output","key"],"sources":["C:/Users/shivr/Downloads/2/Shiv/node_modules/flowbite-react/lib/esm/helpers/merge-deep.js"],"sourcesContent":["import { cloneDeep } from './clone-deep';\nimport { isObject } from './is-object';\n/**\n * Merge and deep copy the values of all of the enumerable own properties of target object from source object to a new object\n * @param target The target object to get properties from.\n * @param source The source object from which to copy properties.\n * @return A new merged and deep copied object.\n */\nexport function mergeDeep(target, source) {\n    if (isObject(source) && Object.keys(source).length === 0) {\n        return cloneDeep({ ...target, ...source });\n    }\n    const output = { ...target, ...source };\n    if (isObject(source) && isObject(target)) {\n        for (const key in source) {\n            if (isObject(source[key]) && key in target && isObject(target[key])) {\n                output[key] = mergeDeep(target[key], source[key]);\n            }\n            else {\n                output[key] = isObject(source[key]) ? cloneDeep(source[key]) : source[key];\n            }\n        }\n    }\n    return output;\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,cAAc;AACxC,SAASC,QAAQ,QAAQ,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,MAAM,EAAEC,MAAM,EAAE;EACtC,IAAIH,QAAQ,CAACG,MAAM,CAAC,IAAIC,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAACG,MAAM,KAAK,CAAC,EAAE;IACtD,OAAOP,SAAS,CAAC;MAAE,GAAGG,MAAM;MAAE,GAAGC;IAAO,CAAC,CAAC;EAC9C;EACA,MAAMI,MAAM,GAAG;IAAE,GAAGL,MAAM;IAAE,GAAGC;EAAO,CAAC;EACvC,IAAIH,QAAQ,CAACG,MAAM,CAAC,IAAIH,QAAQ,CAACE,MAAM,CAAC,EAAE;IACtC,KAAK,MAAMM,GAAG,IAAIL,MAAM,EAAE;MACtB,IAAIH,QAAQ,CAACG,MAAM,CAACK,GAAG,CAAC,CAAC,IAAIA,GAAG,IAAIN,MAAM,IAAIF,QAAQ,CAACE,MAAM,CAACM,GAAG,CAAC,CAAC,EAAE;QACjED,MAAM,CAACC,GAAG,CAAC,GAAGP,SAAS,CAACC,MAAM,CAACM,GAAG,CAAC,EAAEL,MAAM,CAACK,GAAG,CAAC,CAAC;MACrD,CAAC,MACI;QACDD,MAAM,CAACC,GAAG,CAAC,GAAGR,QAAQ,CAACG,MAAM,CAACK,GAAG,CAAC,CAAC,GAAGT,SAAS,CAACI,MAAM,CAACK,GAAG,CAAC,CAAC,GAAGL,MAAM,CAACK,GAAG,CAAC;MAC9E;IACJ;EACJ;EACA,OAAOD,MAAM;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}