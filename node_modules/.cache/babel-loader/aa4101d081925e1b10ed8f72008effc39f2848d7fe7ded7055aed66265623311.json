{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shivr\\\\Downloads\\\\2\\\\Shiv\\\\src\\\\components\\\\Chatbot\\\\Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { AiFillRobot, AiOutlineSlack } from \"react-icons/ai\";\nimport Back from \"../common/back/Back\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./Chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const chatboxRef = useRef(null);\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([]);\n  const [rotationAngle, setRotationAngle] = useState(0); // Rotation state\n\n  const API_KEY = \"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\";\n  const createChatLi = (message, className) => {\n    const chatLi = /*#__PURE__*/_jsxDEV(\"li\", {\n      className: `chat ${className}`,\n      children: className === \"outgoing\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-[30px] p-2\",\n          children: /*#__PURE__*/_jsxDEV(AiFillRobot, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, chatMessages.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n    return chatLi;\n  };\n  const generateResponse = async () => {\n    const API_URL = \"https://api.openai.com/v1/chat/completions\";\n    try {\n      const requestOptions = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: [{\n            role: \"user\",\n            content: userMessage\n          }]\n        })\n      };\n      const response = await fetch(API_URL, requestOptions);\n      const data = await response.json();\n      const responseMessage = data.choices[0].message.content.trim();\n\n      // Check if the response message is already in chatMessages\n      const isMessageRepeated = chatMessages.includes(responseMessage);\n      if (!isMessageRepeated) {\n        setChatMessages([...chatMessages, userMessage, responseMessage]);\n      }\n      setUserMessage(\"\");\n    } catch (error) {\n      console.error(\"Error generating response:\", error);\n    }\n  };\n  const handleChat = () => {\n    if (userMessage.trim() === \"\") return;\n    setChatMessages([...chatMessages, userMessage]);\n    setUserMessage(\"\");\n    setTimeout(() => {\n      setChatMessages(prevMessages => [...prevMessages, \"Thinking...\"]);\n      chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n      generateResponse();\n    }, 600);\n  };\n  const handleChange = event => {\n    setUserMessage(event.target.value);\n  };\n  const handleSendMessage = () => {\n    handleChat();\n  };\n  const handleIconClick = () => {\n    // Rotate the icon by 180 degrees on each click\n    setRotationAngle(prevAngle => prevAngle + 180);\n  };\n  useEffect(() => {\n    chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\n  }, [chatMessages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"MAVRO8gNlAnh+jKrMkA4Yx9HE8w=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","AiFillRobot","AiOutlineSlack","Back","useLocation","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatbot","_s","chatboxRef","userMessage","setUserMessage","chatMessages","setChatMessages","rotationAngle","setRotationAngle","API_KEY","createChatLi","message","className","chatLi","children","fileName","_jsxFileName","lineNumber","columnNumber","length","generateResponse","API_URL","requestOptions","method","headers","Authorization","body","JSON","stringify","model","messages","role","content","response","fetch","data","json","responseMessage","choices","trim","isMessageRepeated","includes","error","console","handleChat","setTimeout","prevMessages","current","scrollTop","scrollHeight","handleChange","event","target","value","handleSendMessage","handleIconClick","prevAngle","_c","$RefreshReg$"],"sources":["C:/Users/shivr/Downloads/2/Shiv/src/components/Chatbot/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { AiFillRobot, AiOutlineSlack } from \"react-icons/ai\";\r\nimport Back from \"../common/back/Back\";\r\n\r\nimport { useLocation } from \"react-router-dom\";\r\nimport \"./Chatbot.css\";\r\n\r\nconst Chatbot = () => {\r\n  const chatboxRef = useRef(null);\r\n  const [userMessage, setUserMessage] = useState(\"\");\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [rotationAngle, setRotationAngle] = useState(0); // Rotation state\r\n\r\n  const API_KEY = \"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\";\r\n\r\n  const createChatLi = (message, className) => {\r\n    const chatLi = (\r\n      <li className={`chat ${className}`} key={chatMessages.length}>\r\n        {className === \"outgoing\" ? (\r\n          <p>{message}</p>\r\n        ) : (\r\n          <>\r\n            <span className=\"text-[30px] p-2\">\r\n              <AiFillRobot />\r\n            </span>\r\n            <p>{message}</p>\r\n          </>\r\n        )}\r\n      </li>\r\n    );\r\n    return chatLi;\r\n  };\r\n\r\n  const generateResponse = async () => {\r\n    const API_URL = \"https://api.openai.com/v1/chat/completions\";\r\n\r\n    try {\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${API_KEY}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: \"gpt-3.5-turbo\",\r\n          messages: [{ role: \"user\", content: userMessage }],\r\n        }),\r\n      };\r\n\r\n      const response = await fetch(API_URL, requestOptions);\r\n      const data = await response.json();\r\n\r\n      const responseMessage = data.choices[0].message.content.trim();\r\n\r\n      // Check if the response message is already in chatMessages\r\n      const isMessageRepeated = chatMessages.includes(responseMessage);\r\n\r\n      if (!isMessageRepeated) {\r\n        setChatMessages([...chatMessages, userMessage, responseMessage]);\r\n      }\r\n\r\n      setUserMessage(\"\");\r\n    } catch (error) {\r\n      console.error(\"Error generating response:\", error);\r\n    }\r\n  };\r\n\r\n  const handleChat = () => {\r\n    if (userMessage.trim() === \"\") return;\r\n\r\n    setChatMessages([...chatMessages, userMessage]);\r\n    setUserMessage(\"\");\r\n\r\n    setTimeout(() => {\r\n      setChatMessages((prevMessages) => [...prevMessages, \"Thinking...\"]);\r\n      chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n\r\n      generateResponse();\r\n    }, 600);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setUserMessage(event.target.value);\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    handleChat();\r\n  };\r\n\r\n  const handleIconClick = () => {\r\n    // Rotate the icon by 180 degrees on each click\r\n    setRotationAngle((prevAngle) => prevAngle + 180);\r\n  };\r\n\r\n  useEffect(() => {\r\n    chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;\r\n  }, [chatMessages]);\r\n\r\n  return (\r\n    <div>\r\n      {/* <div className=\"chatCbotbg\">\r\n        <Back title=\"QueryHelpDesk\" />\r\n\r\n        <div\r\n          className=\" justify-center\r\n     items-center flex p-5\r\n      flex-col\r\n      \"\r\n        >\r\n          <div className=\" w-[90%] md:w-[60%] bg-[#1eb2a6]     rounded-3xl\">\r\n            <header className=\"text md:text-[30px] text-[25px] rounded-t-3xl  text-[white]  font-bold\">\r\n              <h2>\r\n                Query<span className=\"text-[black]\">Help</span>Desk\r\n              </h2>\r\n            </header>\r\n\r\n            <ul\r\n              className=\"chatbox bg-[#ffffffa8] h-80 p-5 overflow-y-auto\"\r\n              ref={chatboxRef}\r\n            >\r\n              {chatMessages.map((message, index) => {\r\n                if (message === \"Thinking...\") {\r\n                  return createChatLi(message, \"thinking\");\r\n                }\r\n                return createChatLi(\r\n                  message,\r\n                  index % 2 === 0 ? \"outgoing\" : \"incoming\"\r\n                );\r\n              })}\r\n            </ul>\r\n\r\n            <div className=\" flex items-center p-2 bg-[#61c48257] rounded-b-2xl justify-around\">\r\n              <textarea\r\n                className=\"w-[90%]  p-1    rounded-2xl justify-center items-center\"\r\n                placeholder=\"Enter a message...\"\r\n                spellCheck=\"false\"\r\n                required\r\n                value={userMessage}\r\n                onChange={handleChange}\r\n              ></textarea>\r\n              <span\r\n                id=\"send-btn\"\r\n                className=\"material-symbols-rounded\"\r\n                onClick={handleIconClick}\r\n              >\r\n                <AiOutlineSlack\r\n                  onClick={handleSendMessage}\r\n                  className={`text-[30px] transform rotate-${rotationAngle}`}\r\n                />\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}