{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = value => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = value => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = x => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/YouTube.tsx\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport isEqual from \"fast-deep-equal\";\nimport youTubePlayer from \"youtube-player\";\nfunction shouldUpdateVideo(prevProps, props) {\n  var _a, _b;\n  if (prevProps.videoId !== props.videoId) {\n    return true;\n  }\n  const prevVars = ((_a = prevProps.opts) == null ? void 0 : _a.playerVars) || {};\n  const vars = ((_b = props.opts) == null ? void 0 : _b.playerVars) || {};\n  return prevVars.start !== vars.start || prevVars.end !== vars.end;\n}\nfunction filterResetOptions(opts = {}) {\n  return __spreadProps(__spreadValues({}, opts), {\n    height: 0,\n    width: 0,\n    playerVars: __spreadProps(__spreadValues({}, opts.playerVars), {\n      autoplay: 0,\n      start: 0,\n      end: 0\n    })\n  });\n}\nfunction shouldResetPlayer(prevProps, props) {\n  return prevProps.videoId !== props.videoId || !isEqual(filterResetOptions(prevProps.opts), filterResetOptions(props.opts));\n}\nfunction shouldUpdatePlayer(prevProps, props) {\n  var _a, _b, _c, _d;\n  return prevProps.id !== props.id || prevProps.className !== props.className || ((_a = prevProps.opts) == null ? void 0 : _a.width) !== ((_b = props.opts) == null ? void 0 : _b.width) || ((_c = prevProps.opts) == null ? void 0 : _c.height) !== ((_d = props.opts) == null ? void 0 : _d.height) || prevProps.iframeClassName !== props.iframeClassName || prevProps.title !== props.title;\n}\nvar defaultProps = {\n  videoId: \"\",\n  id: \"\",\n  className: \"\",\n  iframeClassName: \"\",\n  style: {},\n  title: \"\",\n  loading: void 0,\n  opts: {},\n  onReady: () => {},\n  onError: () => {},\n  onPlay: () => {},\n  onPause: () => {},\n  onEnd: () => {},\n  onStateChange: () => {},\n  onPlaybackRateChange: () => {},\n  onPlaybackQualityChange: () => {}\n};\nvar propTypes = {\n  videoId: PropTypes.string,\n  id: PropTypes.string,\n  className: PropTypes.string,\n  iframeClassName: PropTypes.string,\n  style: PropTypes.object,\n  title: PropTypes.string,\n  loading: PropTypes.oneOf([\"lazy\", \"eager\"]),\n  opts: PropTypes.objectOf(PropTypes.any),\n  onReady: PropTypes.func,\n  onError: PropTypes.func,\n  onPlay: PropTypes.func,\n  onPause: PropTypes.func,\n  onEnd: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onPlaybackRateChange: PropTypes.func,\n  onPlaybackQualityChange: PropTypes.func\n};\nvar _YouTube = class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.destroyPlayerPromise = void 0;\n    this.onPlayerReady = event => {\n      var _a, _b;\n      return (_b = (_a = this.props).onReady) == null ? void 0 : _b.call(_a, event);\n    };\n    this.onPlayerError = event => {\n      var _a, _b;\n      return (_b = (_a = this.props).onError) == null ? void 0 : _b.call(_a, event);\n    };\n    this.onPlayerStateChange = event => {\n      var _a, _b, _c, _d, _e, _f, _g, _h;\n      (_b = (_a = this.props).onStateChange) == null ? void 0 : _b.call(_a, event);\n      switch (event.data) {\n        case _YouTube.PlayerState.ENDED:\n          (_d = (_c = this.props).onEnd) == null ? void 0 : _d.call(_c, event);\n          break;\n        case _YouTube.PlayerState.PLAYING:\n          (_f = (_e = this.props).onPlay) == null ? void 0 : _f.call(_e, event);\n          break;\n        case _YouTube.PlayerState.PAUSED:\n          (_h = (_g = this.props).onPause) == null ? void 0 : _h.call(_g, event);\n          break;\n        default:\n      }\n    };\n    this.onPlayerPlaybackRateChange = event => {\n      var _a, _b;\n      return (_b = (_a = this.props).onPlaybackRateChange) == null ? void 0 : _b.call(_a, event);\n    };\n    this.onPlayerPlaybackQualityChange = event => {\n      var _a, _b;\n      return (_b = (_a = this.props).onPlaybackQualityChange) == null ? void 0 : _b.call(_a, event);\n    };\n    this.destroyPlayer = () => {\n      if (this.internalPlayer) {\n        this.destroyPlayerPromise = this.internalPlayer.destroy().then(() => this.destroyPlayerPromise = void 0);\n        return this.destroyPlayerPromise;\n      }\n      return Promise.resolve();\n    };\n    this.createPlayer = () => {\n      if (typeof document === \"undefined\") return;\n      if (this.destroyPlayerPromise) {\n        this.destroyPlayerPromise.then(this.createPlayer);\n        return;\n      }\n      const playerOpts = __spreadProps(__spreadValues({}, this.props.opts), {\n        videoId: this.props.videoId\n      });\n      this.internalPlayer = youTubePlayer(this.container, playerOpts);\n      this.internalPlayer.on(\"ready\", this.onPlayerReady);\n      this.internalPlayer.on(\"error\", this.onPlayerError);\n      this.internalPlayer.on(\"stateChange\", this.onPlayerStateChange);\n      this.internalPlayer.on(\"playbackRateChange\", this.onPlayerPlaybackRateChange);\n      this.internalPlayer.on(\"playbackQualityChange\", this.onPlayerPlaybackQualityChange);\n      if (this.props.title || this.props.loading) {\n        this.internalPlayer.getIframe().then(iframe => {\n          if (this.props.title) iframe.setAttribute(\"title\", this.props.title);\n          if (this.props.loading) iframe.setAttribute(\"loading\", this.props.loading);\n        });\n      }\n    };\n    this.resetPlayer = () => this.destroyPlayer().then(this.createPlayer);\n    this.updatePlayer = () => {\n      var _a;\n      (_a = this.internalPlayer) == null ? void 0 : _a.getIframe().then(iframe => {\n        if (this.props.id) iframe.setAttribute(\"id\", this.props.id);else iframe.removeAttribute(\"id\");\n        if (this.props.iframeClassName) iframe.setAttribute(\"class\", this.props.iframeClassName);else iframe.removeAttribute(\"class\");\n        if (this.props.opts && this.props.opts.width) iframe.setAttribute(\"width\", this.props.opts.width.toString());else iframe.removeAttribute(\"width\");\n        if (this.props.opts && this.props.opts.height) iframe.setAttribute(\"height\", this.props.opts.height.toString());else iframe.removeAttribute(\"height\");\n        if (this.props.title) iframe.setAttribute(\"title\", this.props.title);else iframe.setAttribute(\"title\", \"YouTube video player\");\n        if (this.props.loading) iframe.setAttribute(\"loading\", this.props.loading);else iframe.removeAttribute(\"loading\");\n      });\n    };\n    this.getInternalPlayer = () => {\n      return this.internalPlayer;\n    };\n    this.updateVideo = () => {\n      var _a, _b, _c, _d;\n      if (typeof this.props.videoId === \"undefined\" || this.props.videoId === null) {\n        (_a = this.internalPlayer) == null ? void 0 : _a.stopVideo();\n        return;\n      }\n      let autoplay = false;\n      const opts = {\n        videoId: this.props.videoId\n      };\n      if ((_b = this.props.opts) == null ? void 0 : _b.playerVars) {\n        autoplay = this.props.opts.playerVars.autoplay === 1;\n        if (\"start\" in this.props.opts.playerVars) {\n          opts.startSeconds = this.props.opts.playerVars.start;\n        }\n        if (\"end\" in this.props.opts.playerVars) {\n          opts.endSeconds = this.props.opts.playerVars.end;\n        }\n      }\n      if (autoplay) {\n        (_c = this.internalPlayer) == null ? void 0 : _c.loadVideoById(opts);\n        return;\n      }\n      (_d = this.internalPlayer) == null ? void 0 : _d.cueVideoById(opts);\n    };\n    this.refContainer = container => {\n      this.container = container;\n    };\n    this.container = null;\n    this.internalPlayer = null;\n  }\n  componentDidMount() {\n    this.createPlayer();\n  }\n  componentDidUpdate(prevProps) {\n    return __async(this, null, function* () {\n      if (shouldUpdatePlayer(prevProps, this.props)) {\n        this.updatePlayer();\n      }\n      if (shouldResetPlayer(prevProps, this.props)) {\n        yield this.resetPlayer();\n      }\n      if (shouldUpdateVideo(prevProps, this.props)) {\n        this.updateVideo();\n      }\n    });\n  }\n  componentWillUnmount() {\n    this.destroyPlayer();\n  }\n  render() {\n    return /* @__PURE__ */React.createElement(\"div\", {\n      className: this.props.className,\n      style: this.props.style\n    }, /* @__PURE__ */React.createElement(\"div\", {\n      id: this.props.id,\n      className: this.props.iframeClassName,\n      ref: this.refContainer\n    }));\n  }\n};\nvar YouTube = _YouTube;\nYouTube.propTypes = propTypes;\nYouTube.defaultProps = defaultProps;\nYouTube.PlayerState = {\n  UNSTARTED: -1,\n  ENDED: 0,\n  PLAYING: 1,\n  PAUSED: 2,\n  BUFFERING: 3,\n  CUED: 5\n};\nvar YouTube_default = YouTube;\nexport { YouTube_default as default };","map":{"version":3,"names":["PropTypes","React","isEqual","youTubePlayer","shouldUpdateVideo","prevProps","props","_a","_b","videoId","prevVars","opts","playerVars","vars","start","end","filterResetOptions","__spreadProps","__spreadValues","height","width","autoplay","shouldResetPlayer","shouldUpdatePlayer","_c","_d","id","className","iframeClassName","title","defaultProps","style","loading","onReady","onError","onPlay","onPause","onEnd","onStateChange","onPlaybackRateChange","onPlaybackQualityChange","propTypes","string","object","oneOf","objectOf","any","func","_YouTube","Component","constructor","destroyPlayerPromise","onPlayerReady","event","call","onPlayerError","onPlayerStateChange","_e","_f","_g","_h","data","PlayerState","ENDED","PLAYING","PAUSED","onPlayerPlaybackRateChange","onPlayerPlaybackQualityChange","destroyPlayer","internalPlayer","destroy","then","Promise","resolve","createPlayer","document","playerOpts","container","on","getIframe","iframe","setAttribute","resetPlayer","updatePlayer","removeAttribute","toString","getInternalPlayer","updateVideo","stopVideo","startSeconds","endSeconds","loadVideoById","cueVideoById","refContainer","componentDidMount","componentDidUpdate","__async","componentWillUnmount","render","createElement","ref","YouTube","UNSTARTED","BUFFERING","CUED","YouTube_default"],"sources":["C:\\Users\\shivr\\Downloads\\2\\Shiv\\node_modules\\react-youtube\\src\\YouTube.tsx"],"sourcesContent":["/** @jsxRuntime classic */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport isEqual from 'fast-deep-equal';\nimport youTubePlayer from 'youtube-player';\nimport type { YouTubePlayer, Options } from 'youtube-player/dist/types';\n\n/**\n * Check whether a `props` change should result in the video being updated.\n */\nfunction shouldUpdateVideo(prevProps: YouTubeProps, props: YouTubeProps) {\n  // A changing video should always trigger an update\n  if (prevProps.videoId !== props.videoId) {\n    return true;\n  }\n\n  // Otherwise, a change in the start/end time playerVars also requires a player\n  // update.\n  const prevVars = prevProps.opts?.playerVars || {};\n  const vars = props.opts?.playerVars || {};\n\n  return prevVars.start !== vars.start || prevVars.end !== vars.end;\n}\n\n/**\n * Neutralize API options that only require a video update, leaving only options\n * that require a player reset. The results can then be compared to see if a\n * player reset is necessary.\n */\nfunction filterResetOptions(opts: Options = {}) {\n  return {\n    ...opts,\n    height: 0,\n    width: 0,\n    playerVars: {\n      ...opts.playerVars,\n      autoplay: 0,\n      start: 0,\n      end: 0,\n    },\n  };\n}\n\n/**\n * Check whether a `props` change should result in the player being reset.\n * The player is reset when the `props.opts` change, except if the only change\n * is in the `start` and `end` playerVars, because a video update can deal with\n * those.\n */\nfunction shouldResetPlayer(prevProps: YouTubeProps, props: YouTubeProps) {\n  return (\n    prevProps.videoId !== props.videoId || !isEqual(filterResetOptions(prevProps.opts), filterResetOptions(props.opts))\n  );\n}\n\n/**\n * Check whether a props change should result in an update of player.\n */\nfunction shouldUpdatePlayer(prevProps: YouTubeProps, props: YouTubeProps) {\n  return (\n    prevProps.id !== props.id ||\n    prevProps.className !== props.className ||\n    prevProps.opts?.width !== props.opts?.width ||\n    prevProps.opts?.height !== props.opts?.height ||\n    prevProps.iframeClassName !== props.iframeClassName ||\n    prevProps.title !== props.title\n  );\n}\n\ntype YoutubePlayerCueVideoOptions = {\n  videoId: string;\n  startSeconds?: number;\n  endSeconds?: number;\n  suggestedQuality?: string;\n};\n\nexport { YouTubePlayer };\n\nexport type YouTubeEvent<T = any> = {\n  data: T;\n  target: YouTubePlayer;\n};\n\nexport type YouTubeProps = {\n  /**\n   * The YouTube video ID.\n   *\n   * Examples\n   * - https://www.youtube.com/watch?v=XxVg_s8xAms (`XxVg_s8xAms` is the ID)\n   * - https://www.youtube.com/embed/-DX3vJiqxm4 (`-DX3vJiqxm4` is the ID)\n   */\n  videoId?: string;\n  /**\n   * Custom ID for the player element\n   */\n  id?: string;\n  /**\n   * Custom class name for the player element\n   */\n  className?: string;\n  /**\n   * Custom class name for the iframe element\n   */\n  iframeClassName?: string;\n  /**\n   * Custom style for the player container element\n   */\n  style?: React.CSSProperties;\n  /**\n   * Title of the video for the iframe's title tag.\n   */\n  title?: React.IframeHTMLAttributes<HTMLIFrameElement>['title'];\n  /**\n   * Indicates how the browser should load the iframe\n   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-loading}\n   */\n  loading?: React.IframeHTMLAttributes<HTMLIFrameElement>['loading'];\n  /**\n   * An object that specifies player options\n   * {@link https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player}\n   */\n  opts?: Options;\n  /**\n   * This event fires whenever a player has finished loading and is ready to begin receiving API calls.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onReady}\n   */\n  onReady?: (event: YouTubeEvent) => void;\n  /**\n   * This event fires if an error occurs in the player.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onError}\n   */\n  onError?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires when the layer's state changes to PlayerState.PLAYING.\n   */\n  onPlay?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires when the layer's state changes to PlayerState.PAUSED.\n   */\n  onPause?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires when the layer's state changes to PlayerState.ENDED.\n   */\n  onEnd?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires whenever the player's state changes.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onStateChange}\n   */\n  onStateChange?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires whenever the video playback quality changes.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onPlaybackRateChange}\n   */\n  onPlaybackRateChange?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires whenever the video playback rate changes.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onPlaybackQualityChange}\n   */\n  onPlaybackQualityChange?: (event: YouTubeEvent<string>) => void;\n};\n\nconst defaultProps: YouTubeProps = {\n  videoId: '',\n  id: '',\n  className: '',\n  iframeClassName: '',\n  style: {},\n  title: '',\n  loading: undefined,\n  opts: {},\n  onReady: () => {},\n  onError: () => {},\n  onPlay: () => {},\n  onPause: () => {},\n  onEnd: () => {},\n  onStateChange: () => {},\n  onPlaybackRateChange: () => {},\n  onPlaybackQualityChange: () => {},\n};\n\nconst propTypes = {\n  videoId: PropTypes.string,\n  id: PropTypes.string,\n  className: PropTypes.string,\n  iframeClassName: PropTypes.string,\n  style: PropTypes.object,\n  title: PropTypes.string,\n  loading: PropTypes.oneOf(['lazy', 'eager']),\n  opts: PropTypes.objectOf(PropTypes.any),\n  onReady: PropTypes.func,\n  onError: PropTypes.func,\n  onPlay: PropTypes.func,\n  onPause: PropTypes.func,\n  onEnd: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onPlaybackRateChange: PropTypes.func,\n  onPlaybackQualityChange: PropTypes.func,\n};\n\nclass YouTube extends React.Component<YouTubeProps> {\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n\n  /**\n   * Expose PlayerState constants for convenience. These constants can also be\n   * accessed through the global YT object after the YouTube IFrame API is instantiated.\n   * https://developers.google.com/youtube/iframe_api_reference#onStateChange\n   */\n  static PlayerState = {\n    UNSTARTED: -1,\n    ENDED: 0,\n    PLAYING: 1,\n    PAUSED: 2,\n    BUFFERING: 3,\n    CUED: 5,\n  };\n\n  container: HTMLDivElement | null;\n  internalPlayer: YouTubePlayer | null;\n\n  constructor(props: any) {\n    super(props);\n\n    this.container = null;\n    this.internalPlayer = null;\n  }\n\n  /**\n   * Note: The `youtube-player` package that is used promisifies all YouTube\n   * Player API calls, which introduces a delay of a tick before it actually\n   * gets destroyed.\n   *\n   * The promise to destroy the player is stored here so we can make sure to\n   * only re-create the Player after it's been destroyed.\n   *\n   * See: https://github.com/tjallingt/react-youtube/issues/355\n   */\n  destroyPlayerPromise: Promise<void> | undefined = undefined;\n\n  componentDidMount() {\n    this.createPlayer();\n  }\n\n  async componentDidUpdate(prevProps: YouTubeProps) {\n    if (shouldUpdatePlayer(prevProps, this.props)) {\n      this.updatePlayer();\n    }\n\n    if (shouldResetPlayer(prevProps, this.props)) {\n      await this.resetPlayer();\n    }\n\n    if (shouldUpdateVideo(prevProps, this.props)) {\n      this.updateVideo();\n    }\n  }\n\n  componentWillUnmount() {\n    this.destroyPlayer();\n  }\n\n  /**\n   * This event fires whenever a player has finished loading and is ready to begin receiving API calls.\n   * https://developers.google.com/youtube/iframe_api_reference#onReady\n   */\n  onPlayerReady = (event: YouTubeEvent) => this.props.onReady?.(event);\n\n  /**\n   * This event fires if an error occurs in the player.\n   * https://developers.google.com/youtube/iframe_api_reference#onError\n   */\n  onPlayerError = (event: YouTubeEvent<number>) => this.props.onError?.(event);\n\n  /**\n   * This event fires whenever the video playback quality changes.\n   * https://developers.google.com/youtube/iframe_api_reference#onStateChange\n   */\n  onPlayerStateChange = (event: YouTubeEvent<number>) => {\n    this.props.onStateChange?.(event);\n    // @ts-ignore\n    switch (event.data) {\n      case YouTube.PlayerState.ENDED:\n        this.props.onEnd?.(event);\n        break;\n\n      case YouTube.PlayerState.PLAYING:\n        this.props.onPlay?.(event);\n        break;\n\n      case YouTube.PlayerState.PAUSED:\n        this.props.onPause?.(event);\n        break;\n\n      default:\n    }\n  };\n\n  /**\n   * This event fires whenever the video playback quality changes.\n   * https://developers.google.com/youtube/iframe_api_reference#onPlaybackRateChange\n   */\n  onPlayerPlaybackRateChange = (event: YouTubeEvent<number>) => this.props.onPlaybackRateChange?.(event);\n\n  /**\n   * This event fires whenever the video playback rate changes.\n   * https://developers.google.com/youtube/iframe_api_reference#onPlaybackQualityChange\n   */\n  onPlayerPlaybackQualityChange = (event: YouTubeEvent<string>) => this.props.onPlaybackQualityChange?.(event);\n\n  /**\n   * Destroy the YouTube Player using its async API and store the promise so we\n   * can await before re-creating it.\n   */\n  destroyPlayer = () => {\n    if (this.internalPlayer) {\n      this.destroyPlayerPromise = this.internalPlayer.destroy().then(() => (this.destroyPlayerPromise = undefined));\n      return this.destroyPlayerPromise;\n    }\n    return Promise.resolve();\n  };\n\n  /**\n   * Initialize the YouTube Player API on the container and attach event handlers\n   */\n  createPlayer = () => {\n    // do not attempt to create a player server-side, it won't work\n    if (typeof document === 'undefined') return;\n    if (this.destroyPlayerPromise) {\n      // We need to first await the existing player to be destroyed before\n      // we can re-create it.\n      this.destroyPlayerPromise.then(this.createPlayer);\n      return;\n    }\n    // create player\n    const playerOpts: Options = {\n      ...this.props.opts,\n      // preload the `videoId` video if one is already given\n      videoId: this.props.videoId,\n    };\n    this.internalPlayer = youTubePlayer(this.container!, playerOpts);\n    // attach event handlers\n    this.internalPlayer.on('ready', this.onPlayerReady as any);\n    this.internalPlayer.on('error', this.onPlayerError as any);\n    this.internalPlayer.on('stateChange', this.onPlayerStateChange as any);\n    this.internalPlayer.on('playbackRateChange', this.onPlayerPlaybackRateChange as any);\n    this.internalPlayer.on('playbackQualityChange', this.onPlayerPlaybackQualityChange as any);\n    if (this.props.title || this.props.loading) {\n      this.internalPlayer.getIframe().then((iframe) => {\n        if (this.props.title) iframe.setAttribute('title', this.props.title);\n        if (this.props.loading) iframe.setAttribute('loading', this.props.loading);\n      });\n    }\n  };\n\n  /**\n   * Shorthand for destroying and then re-creating the YouTube Player\n   */\n  resetPlayer = () => this.destroyPlayer().then(this.createPlayer);\n\n  /**\n   * Method to update the id and class of the YouTube Player iframe.\n   * React should update this automatically but since the YouTube Player API\n   * replaced the DIV that is mounted by React we need to do this manually.\n   */\n  updatePlayer = () => {\n    this.internalPlayer?.getIframe().then((iframe) => {\n      if (this.props.id) iframe.setAttribute('id', this.props.id);\n      else iframe.removeAttribute('id');\n      if (this.props.iframeClassName) iframe.setAttribute('class', this.props.iframeClassName);\n      else iframe.removeAttribute('class');\n      if (this.props.opts && this.props.opts.width) iframe.setAttribute('width', this.props.opts.width.toString());\n      else iframe.removeAttribute('width');\n      if (this.props.opts && this.props.opts.height) iframe.setAttribute('height', this.props.opts.height.toString());\n      else iframe.removeAttribute('height');\n      if (this.props.title) iframe.setAttribute('title', this.props.title);\n      else iframe.setAttribute('title', 'YouTube video player');\n      if (this.props.loading) iframe.setAttribute('loading', this.props.loading);\n      else iframe.removeAttribute('loading');\n    });\n  };\n\n  /**\n   *  Method to return the internalPlayer object.\n   */\n  getInternalPlayer = () => {\n    return this.internalPlayer;\n  };\n\n  /**\n   * Call YouTube Player API methods to update the currently playing video.\n   * Depending on the `opts.playerVars.autoplay` this function uses one of two\n   * YouTube Player API methods to update the video.\n   */\n  updateVideo = () => {\n    if (typeof this.props.videoId === 'undefined' || this.props.videoId === null) {\n      this.internalPlayer?.stopVideo();\n      return;\n    }\n\n    // set queueing options\n    let autoplay = false;\n    const opts: YoutubePlayerCueVideoOptions = {\n      videoId: this.props.videoId,\n    };\n\n    if (this.props.opts?.playerVars) {\n      autoplay = this.props.opts.playerVars.autoplay === 1;\n      if ('start' in this.props.opts.playerVars) {\n        opts.startSeconds = this.props.opts.playerVars.start;\n      }\n      if ('end' in this.props.opts.playerVars) {\n        opts.endSeconds = this.props.opts.playerVars.end;\n      }\n    }\n\n    // if autoplay is enabled loadVideoById\n    if (autoplay) {\n      this.internalPlayer?.loadVideoById(opts);\n      return;\n    }\n    // default behaviour just cues the video\n    this.internalPlayer?.cueVideoById(opts);\n  };\n\n  refContainer = (container: HTMLDivElement) => {\n    this.container = container;\n  };\n\n  render() {\n    return (\n      <div className={this.props.className} style={this.props.style}>\n        <div id={this.props.id} className={this.props.iframeClassName} ref={this.refContainer} />\n      </div>\n    );\n  }\n}\n\nexport default YouTube;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}