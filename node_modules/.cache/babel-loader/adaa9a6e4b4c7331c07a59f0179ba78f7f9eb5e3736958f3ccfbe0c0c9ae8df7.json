{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shivr\\\\Downloads\\\\2\\\\Shiv\\\\src\\\\Auth\\\\OTPInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./login.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OTPInput = ({\n  length,\n  onChange\n}) => {\n  _s();\n  const [otp, setOtp] = useState(Array(length).fill(\"\"));\n  const handleChange = (e, index) => {\n    const value = e.target.value;\n\n    // Ensure input is a number\n    if (/[^0-9]/.test(value)) {\n      return;\n    }\n\n    // Update the OTP array with the new value\n    const newOtp = [...otp];\n    newOtp[index] = value;\n    setOtp(newOtp);\n\n    // Join the OTP array into a single string and pass it to the parent component\n    onChange(newOtp.join(\"\"));\n  };\n  const handleKeyDown = (e, index) => {\n    if (e.key === \"Backspace\" && index > 0) {\n      // Move focus to the previous input on Backspace\n      document.getElementById(`otp-${index - 1}`).focus();\n    } else if (e.key === \"ArrowRight\" && index < length - 1) {\n      // Move focus to the next input on ArrowRight\n      document.getElementById(`otp-${index + 1}`).focus();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"otp-input-container\",\n    children: otp.map((digit, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n      id: `otp-${index}`,\n      type: \"text\",\n      inputMode: \"numeric\",\n      pattern: \"[0-9]*\",\n      maxLength: \"1\",\n      value: digit,\n      onChange: e => handleChange(e, index),\n      onKeyDown: e => handleKeyDown(e, index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(OTPInput, \"biCgXCoqlcCVF4Uk4RcNEQ0rYfg=\");\n_c = OTPInput;\nOTPInput.propTypes = {\n  length: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired\n};\nexport default OTPInput;\nvar _c;\n$RefreshReg$(_c, \"OTPInput\");","map":{"version":3,"names":["React","useState","PropTypes","jsxDEV","_jsxDEV","OTPInput","length","onChange","_s","otp","setOtp","Array","fill","handleChange","e","index","value","target","test","newOtp","join","handleKeyDown","key","document","getElementById","focus","className","children","map","digit","id","type","inputMode","pattern","maxLength","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","number","isRequired","func","$RefreshReg$"],"sources":["C:/Users/shivr/Downloads/2/Shiv/src/Auth/OTPInput.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./login.css\"\r\n\r\nconst OTPInput = ({ length, onChange }) => {\r\n  const [otp, setOtp] = useState(Array(length).fill(\"\"));\r\n\r\n  const handleChange = (e, index) => {\r\n    const value = e.target.value;\r\n\r\n    // Ensure input is a number\r\n    if (/[^0-9]/.test(value)) {\r\n      return;\r\n    }\r\n\r\n    // Update the OTP array with the new value\r\n    const newOtp = [...otp];\r\n    newOtp[index] = value;\r\n    setOtp(newOtp);\r\n\r\n    // Join the OTP array into a single string and pass it to the parent component\r\n    onChange(newOtp.join(\"\"));\r\n  };\r\n\r\n  const handleKeyDown = (e, index) => {\r\n    if (e.key === \"Backspace\" && index > 0) {\r\n      // Move focus to the previous input on Backspace\r\n      document.getElementById(`otp-${index - 1}`).focus();\r\n    } else if (e.key === \"ArrowRight\" && index < length - 1) {\r\n      // Move focus to the next input on ArrowRight\r\n      document.getElementById(`otp-${index + 1}`).focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"otp-input-container\">\r\n      {otp.map((digit, index) => (\r\n        <input\r\n          key={index}\r\n          id={`otp-${index}`}\r\n          type=\"text\"\r\n          inputMode=\"numeric\"\r\n          pattern=\"[0-9]*\"\r\n          maxLength=\"1\"\r\n          value={digit}\r\n          onChange={(e) => handleChange(e, index)}\r\n          onKeyDown={(e) => handleKeyDown(e, index)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nOTPInput.propTypes = {\r\n  length: PropTypes.number.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default OTPInput;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAO,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGT,QAAQ,CAACU,KAAK,CAACL,MAAM,CAAC,CAACM,IAAI,CAAC,EAAE,CAAC,CAAC;EAEtD,MAAMC,YAAY,GAAGA,CAACC,CAAC,EAAEC,KAAK,KAAK;IACjC,MAAMC,KAAK,GAAGF,CAAC,CAACG,MAAM,CAACD,KAAK;;IAE5B;IACA,IAAI,QAAQ,CAACE,IAAI,CAACF,KAAK,CAAC,EAAE;MACxB;IACF;;IAEA;IACA,MAAMG,MAAM,GAAG,CAAC,GAAGV,GAAG,CAAC;IACvBU,MAAM,CAACJ,KAAK,CAAC,GAAGC,KAAK;IACrBN,MAAM,CAACS,MAAM,CAAC;;IAEd;IACAZ,QAAQ,CAACY,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;EAC3B,CAAC;EAED,MAAMC,aAAa,GAAGA,CAACP,CAAC,EAAEC,KAAK,KAAK;IAClC,IAAID,CAAC,CAACQ,GAAG,KAAK,WAAW,IAAIP,KAAK,GAAG,CAAC,EAAE;MACtC;MACAQ,QAAQ,CAACC,cAAc,CAAE,OAAMT,KAAK,GAAG,CAAE,EAAC,CAAC,CAACU,KAAK,CAAC,CAAC;IACrD,CAAC,MAAM,IAAIX,CAAC,CAACQ,GAAG,KAAK,YAAY,IAAIP,KAAK,GAAGT,MAAM,GAAG,CAAC,EAAE;MACvD;MACAiB,QAAQ,CAACC,cAAc,CAAE,OAAMT,KAAK,GAAG,CAAE,EAAC,CAAC,CAACU,KAAK,CAAC,CAAC;IACrD;EACF,CAAC;EAED,oBACErB,OAAA;IAAKsB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,EACjClB,GAAG,CAACmB,GAAG,CAAC,CAACC,KAAK,EAAEd,KAAK,kBACpBX,OAAA;MAEE0B,EAAE,EAAG,OAAMf,KAAM,EAAE;MACnBgB,IAAI,EAAC,MAAM;MACXC,SAAS,EAAC,SAAS;MACnBC,OAAO,EAAC,QAAQ;MAChBC,SAAS,EAAC,GAAG;MACblB,KAAK,EAAEa,KAAM;MACbtB,QAAQ,EAAGO,CAAC,IAAKD,YAAY,CAACC,CAAC,EAAEC,KAAK,CAAE;MACxCoB,SAAS,EAAGrB,CAAC,IAAKO,aAAa,CAACP,CAAC,EAAEC,KAAK;IAAE,GARrCA,KAAK;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASX,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC/B,EAAA,CA/CIH,QAAQ;AAAAmC,EAAA,GAARnC,QAAQ;AAiDdA,QAAQ,CAACoC,SAAS,GAAG;EACnBnC,MAAM,EAAEJ,SAAS,CAACwC,MAAM,CAACC,UAAU;EACnCpC,QAAQ,EAAEL,SAAS,CAAC0C,IAAI,CAACD;AAC3B,CAAC;AAED,eAAetC,QAAQ;AAAC,IAAAmC,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}